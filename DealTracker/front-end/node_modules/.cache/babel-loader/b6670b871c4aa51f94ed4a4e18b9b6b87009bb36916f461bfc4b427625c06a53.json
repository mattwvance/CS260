{"ast":null,"code":"import _slicedToArray from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncIterator from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, { PassThrough } from 'node:stream';\nimport { types, deprecate, promisify } from 'node:util';\nimport { Buffer } from 'node:buffer';\nimport Blob from 'fetch-blob';\nimport { FormData, formDataToBlob } from 'formdata-polyfill/esm.min.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { FetchBaseError } from './errors/base.js';\nimport { isBlob, isURLSearchParameters } from './utils/is.js';\nvar pipeline = promisify(Stream.pipeline);\nvar INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nvar Body = /*#__PURE__*/function () {\n  function Body(body) {\n    var _this = this;\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 0 : _ref$size;\n    _classCallCheck(this, Body);\n    var boundary = null;\n    if (body === null) {\n      // Body is undefined or null\n      body = null;\n    } else if (isURLSearchParameters(body)) {\n      // Body is a URLSearchParams\n      body = Buffer.from(body.toString());\n    } else if (isBlob(body)) {\n      // Body is blob\n    } else if (Buffer.isBuffer(body)) {\n      // Body is Buffer\n    } else if (types.isAnyArrayBuffer(body)) {\n      // Body is ArrayBuffer\n      body = Buffer.from(body);\n    } else if (ArrayBuffer.isView(body)) {\n      // Body is ArrayBufferView\n      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n    } else if (body instanceof Stream) {\n      // Body is stream\n    } else if (body instanceof FormData) {\n      // Body is FormData\n      body = formDataToBlob(body);\n      boundary = body.type.split('=')[1];\n    } else {\n      // None of the above\n      // coerce to string then buffer\n      body = Buffer.from(String(body));\n    }\n    var stream = body;\n    if (Buffer.isBuffer(body)) {\n      stream = Stream.Readable.from(body);\n    } else if (isBlob(body)) {\n      stream = Stream.Readable.from(body.stream());\n    }\n    this[INTERNALS] = {\n      body: body,\n      stream: stream,\n      boundary: boundary,\n      disturbed: false,\n      error: null\n    };\n    this.size = size;\n    if (body instanceof Stream) {\n      body.on('error', function (error_) {\n        var error = error_ instanceof FetchBaseError ? error_ : new FetchError(\"Invalid response body while trying to fetch \".concat(_this.url, \": \").concat(error_.message), 'system', error_);\n        _this[INTERNALS].error = error;\n      });\n    }\n  }\n  _createClass(Body, [{\n    key: \"body\",\n    get: function get() {\n      return this[INTERNALS].stream;\n    }\n  }, {\n    key: \"bodyUsed\",\n    get: function get() {\n      return this[INTERNALS].disturbed;\n    }\n\n    /**\n     * Decode response as ArrayBuffer\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"arrayBuffer\",\n    value: function () {\n      var _arrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$consumeBody, buffer, byteOffset, byteLength;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return consumeBody(this);\n              case 2:\n                _yield$consumeBody = _context.sent;\n                buffer = _yield$consumeBody.buffer;\n                byteOffset = _yield$consumeBody.byteOffset;\n                byteLength = _yield$consumeBody.byteLength;\n                return _context.abrupt(\"return\", buffer.slice(byteOffset, byteOffset + byteLength));\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function arrayBuffer() {\n        return _arrayBuffer.apply(this, arguments);\n      }\n      return arrayBuffer;\n    }()\n  }, {\n    key: \"formData\",\n    value: function () {\n      var _formData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var ct, _formData2, parameters, _iterator2, _step2, _step2$value, name, value, _yield$import, toFormData;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ct = this.headers.get('content-type');\n                if (!ct.startsWith('application/x-www-form-urlencoded')) {\n                  _context2.next = 11;\n                  break;\n                }\n                _formData2 = new FormData();\n                _context2.t0 = URLSearchParams;\n                _context2.next = 6;\n                return this.text();\n              case 6:\n                _context2.t1 = _context2.sent;\n                parameters = new _context2.t0(_context2.t1);\n                _iterator2 = _createForOfIteratorHelper(parameters);\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    _step2$value = _slicedToArray(_step2.value, 2), name = _step2$value[0], value = _step2$value[1];\n                    _formData2.append(name, value);\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                return _context2.abrupt(\"return\", _formData2);\n              case 11:\n                _context2.next = 13;\n                return import('./utils/multipart-parser.js');\n              case 13:\n                _yield$import = _context2.sent;\n                toFormData = _yield$import.toFormData;\n                return _context2.abrupt(\"return\", toFormData(this.body, ct));\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function formData() {\n        return _formData.apply(this, arguments);\n      }\n      return formData;\n    }()\n    /**\n     * Return raw response as Blob\n     *\n     * @return Promise\n     */\n  }, {\n    key: \"blob\",\n    value: function () {\n      var _blob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var ct, buf;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ct = this.headers && this.headers.get('content-type') || this[INTERNALS].body && this[INTERNALS].body.type || '';\n                _context3.next = 3;\n                return this.arrayBuffer();\n              case 3:\n                buf = _context3.sent;\n                return _context3.abrupt(\"return\", new Blob([buf], {\n                  type: ct\n                }));\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function blob() {\n        return _blob.apply(this, arguments);\n      }\n      return blob;\n    }()\n    /**\n     * Decode response as json\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"json\",\n    value: function () {\n      var _json = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var text;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.text();\n              case 2:\n                text = _context4.sent;\n                return _context4.abrupt(\"return\", JSON.parse(text));\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function json() {\n        return _json.apply(this, arguments);\n      }\n      return json;\n    }()\n    /**\n     * Decode response as text\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"text\",\n    value: function () {\n      var _text = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var buffer;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return consumeBody(this);\n              case 2:\n                buffer = _context5.sent;\n                return _context5.abrupt(\"return\", new TextDecoder().decode(buffer));\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function text() {\n        return _text.apply(this, arguments);\n      }\n      return text;\n    }()\n    /**\n     * Decode response as buffer (non-spec api)\n     *\n     * @return  Promise\n     */\n  }, {\n    key: \"buffer\",\n    value: function buffer() {\n      return consumeBody(this);\n    }\n  }]);\n  return Body;\n}();\nexport { Body as default };\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n  body: {\n    enumerable: true\n  },\n  bodyUsed: {\n    enumerable: true\n  },\n  arrayBuffer: {\n    enumerable: true\n  },\n  blob: {\n    enumerable: true\n  },\n  json: {\n    enumerable: true\n  },\n  text: {\n    enumerable: true\n  },\n  data: {\n    get: deprecate(function () {}, 'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead', 'https://github.com/node-fetch/node-fetch/issues/1000 (response)')\n  }\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nfunction consumeBody(_x) {\n  return _consumeBody.apply(this, arguments);\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nfunction _consumeBody() {\n  _consumeBody = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(data) {\n    var body, accum, accumBytes, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, error, error_;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (!data[INTERNALS].disturbed) {\n              _context7.next = 2;\n              break;\n            }\n            throw new TypeError(\"body used already for: \".concat(data.url));\n          case 2:\n            data[INTERNALS].disturbed = true;\n            if (!data[INTERNALS].error) {\n              _context7.next = 5;\n              break;\n            }\n            throw data[INTERNALS].error;\n          case 5:\n            body = data.body; // Body is null\n            if (!(body === null)) {\n              _context7.next = 8;\n              break;\n            }\n            return _context7.abrupt(\"return\", Buffer.alloc(0));\n          case 8:\n            if (body instanceof Stream) {\n              _context7.next = 10;\n              break;\n            }\n            return _context7.abrupt(\"return\", Buffer.alloc(0));\n          case 10:\n            // Body is stream\n            // get ready to actually consume the body\n            accum = [];\n            accumBytes = 0;\n            _context7.prev = 12;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context7.prev = 15;\n            _iterator = _asyncIterator(body);\n          case 17:\n            _context7.next = 19;\n            return _iterator.next();\n          case 19:\n            if (!(_iteratorAbruptCompletion = !(_step = _context7.sent).done)) {\n              _context7.next = 30;\n              break;\n            }\n            chunk = _step.value;\n            if (!(data.size > 0 && accumBytes + chunk.length > data.size)) {\n              _context7.next = 25;\n              break;\n            }\n            error = new FetchError(\"content size at \".concat(data.url, \" over limit: \").concat(data.size), 'max-size');\n            body.destroy(error);\n            throw error;\n          case 25:\n            accumBytes += chunk.length;\n            accum.push(chunk);\n          case 27:\n            _iteratorAbruptCompletion = false;\n            _context7.next = 17;\n            break;\n          case 30:\n            _context7.next = 36;\n            break;\n          case 32:\n            _context7.prev = 32;\n            _context7.t0 = _context7[\"catch\"](15);\n            _didIteratorError = true;\n            _iteratorError = _context7.t0;\n          case 36:\n            _context7.prev = 36;\n            _context7.prev = 37;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context7.next = 41;\n              break;\n            }\n            _context7.next = 41;\n            return _iterator.return();\n          case 41:\n            _context7.prev = 41;\n            if (!_didIteratorError) {\n              _context7.next = 44;\n              break;\n            }\n            throw _iteratorError;\n          case 44:\n            return _context7.finish(41);\n          case 45:\n            return _context7.finish(36);\n          case 46:\n            _context7.next = 52;\n            break;\n          case 48:\n            _context7.prev = 48;\n            _context7.t1 = _context7[\"catch\"](12);\n            error_ = _context7.t1 instanceof FetchBaseError ? _context7.t1 : new FetchError(\"Invalid response body while trying to fetch \".concat(data.url, \": \").concat(_context7.t1.message), 'system', _context7.t1);\n            throw error_;\n          case 52:\n            if (!(body.readableEnded === true || body._readableState.ended === true)) {\n              _context7.next = 64;\n              break;\n            }\n            _context7.prev = 53;\n            if (!accum.every(function (c) {\n              return typeof c === 'string';\n            })) {\n              _context7.next = 56;\n              break;\n            }\n            return _context7.abrupt(\"return\", Buffer.from(accum.join('')));\n          case 56:\n            return _context7.abrupt(\"return\", Buffer.concat(accum, accumBytes));\n          case 59:\n            _context7.prev = 59;\n            _context7.t2 = _context7[\"catch\"](53);\n            throw new FetchError(\"Could not create Buffer from response body for \".concat(data.url, \": \").concat(_context7.t2.message), 'system', _context7.t2);\n          case 62:\n            _context7.next = 65;\n            break;\n          case 64:\n            throw new FetchError(\"Premature close of server response while trying to fetch \".concat(data.url));\n          case 65:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[12, 48], [15, 32, 36, 46], [37,, 41, 45], [53, 59]]);\n  }));\n  return _consumeBody.apply(this, arguments);\n}\nexport var clone = function clone(instance, highWaterMark) {\n  var p1;\n  var p2;\n  var body = instance[INTERNALS].body;\n\n  // Don't allow cloning a used body\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used');\n  }\n\n  // Check that body is a stream and not form-data object\n  // note: we can't clone the form-data object without having it as a dependency\n  if (body instanceof Stream && typeof body.getBoundary !== 'function') {\n    // Tee instance body\n    p1 = new PassThrough({\n      highWaterMark: highWaterMark\n    });\n    p2 = new PassThrough({\n      highWaterMark: highWaterMark\n    });\n    body.pipe(p1);\n    body.pipe(p2);\n    // Set instance body to teed body and return the other teed body\n    instance[INTERNALS].stream = p1;\n    body = p2;\n  }\n  return body;\n};\nvar getNonSpecFormDataBoundary = deprecate(function (body) {\n  return body.getBoundary();\n}, 'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package', 'https://github.com/node-fetch/node-fetch/issues/1167');\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport var extractContentType = function extractContentType(body, request) {\n  // Body is null or undefined\n  if (body === null) {\n    return null;\n  }\n\n  // Body is string\n  if (typeof body === 'string') {\n    return 'text/plain;charset=UTF-8';\n  }\n\n  // Body is a URLSearchParams\n  if (isURLSearchParameters(body)) {\n    return 'application/x-www-form-urlencoded;charset=UTF-8';\n  }\n\n  // Body is blob\n  if (isBlob(body)) {\n    return body.type || null;\n  }\n\n  // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n  if (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n    return null;\n  }\n  if (body instanceof FormData) {\n    return \"multipart/form-data; boundary=\".concat(request[INTERNALS].boundary);\n  }\n\n  // Detect form data input from form-data module\n  if (body && typeof body.getBoundary === 'function') {\n    return \"multipart/form-data;boundary=\".concat(getNonSpecFormDataBoundary(body));\n  }\n\n  // Body is stream - can't really do much about this\n  if (body instanceof Stream) {\n    return null;\n  }\n\n  // Body constructor defaults other things to string\n  return 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport var getTotalBytes = function getTotalBytes(request) {\n  var body = request[INTERNALS].body;\n\n  // Body is null or undefined\n  if (body === null) {\n    return 0;\n  }\n\n  // Body is Blob\n  if (isBlob(body)) {\n    return body.size;\n  }\n\n  // Body is Buffer\n  if (Buffer.isBuffer(body)) {\n    return body.length;\n  }\n\n  // Detect form data input from form-data module\n  if (body && typeof body.getLengthSync === 'function') {\n    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n  }\n\n  // Body is stream\n  return null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport var writeToStream = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(dest, _ref2) {\n    var body;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            body = _ref2.body;\n            if (!(body === null)) {\n              _context6.next = 5;\n              break;\n            }\n            // Body is null\n            dest.end();\n            _context6.next = 7;\n            break;\n          case 5:\n            _context6.next = 7;\n            return pipeline(body, dest);\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return function writeToStream(_x2, _x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["Stream","PassThrough","types","deprecate","promisify","Buffer","Blob","FormData","formDataToBlob","FetchError","FetchBaseError","isBlob","isURLSearchParameters","pipeline","INTERNALS","Symbol","Body","body","size","boundary","from","toString","isBuffer","isAnyArrayBuffer","ArrayBuffer","isView","buffer","byteOffset","byteLength","type","split","String","stream","Readable","disturbed","error","on","error_","url","message","consumeBody","slice","ct","headers","get","startsWith","formData","URLSearchParams","text","parameters","name","value","append","toFormData","arrayBuffer","buf","JSON","parse","TextDecoder","decode","prototype","Object","defineProperties","enumerable","bodyUsed","blob","json","data","TypeError","alloc","accum","accumBytes","chunk","length","destroy","push","readableEnded","_readableState","ended","every","c","join","concat","clone","instance","highWaterMark","p1","p2","Error","getBoundary","pipe","getNonSpecFormDataBoundary","extractContentType","request","getTotalBytes","getLengthSync","hasKnownLength","writeToStream","dest","end"],"sources":["/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/node-fetch/src/body.js"],"sourcesContent":["\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\n\nimport Stream, {PassThrough} from 'node:stream';\nimport {types, deprecate, promisify} from 'node:util';\nimport {Buffer} from 'node:buffer';\n\nimport Blob from 'fetch-blob';\nimport {FormData, formDataToBlob} from 'formdata-polyfill/esm.min.js';\n\nimport {FetchError} from './errors/fetch-error.js';\nimport {FetchBaseError} from './errors/base.js';\nimport {isBlob, isURLSearchParameters} from './utils/is.js';\n\nconst pipeline = promisify(Stream.pipeline);\nconst INTERNALS = Symbol('Body internals');\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nexport default class Body {\n\tconstructor(body, {\n\t\tsize = 0\n\t} = {}) {\n\t\tlet boundary = null;\n\n\t\tif (body === null) {\n\t\t\t// Body is undefined or null\n\t\t\tbody = null;\n\t\t} else if (isURLSearchParameters(body)) {\n\t\t\t// Body is a URLSearchParams\n\t\t\tbody = Buffer.from(body.toString());\n\t\t} else if (isBlob(body)) {\n\t\t\t// Body is blob\n\t\t} else if (Buffer.isBuffer(body)) {\n\t\t\t// Body is Buffer\n\t\t} else if (types.isAnyArrayBuffer(body)) {\n\t\t\t// Body is ArrayBuffer\n\t\t\tbody = Buffer.from(body);\n\t\t} else if (ArrayBuffer.isView(body)) {\n\t\t\t// Body is ArrayBufferView\n\t\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t\t} else if (body instanceof Stream) {\n\t\t\t// Body is stream\n\t\t} else if (body instanceof FormData) {\n\t\t\t// Body is FormData\n\t\t\tbody = formDataToBlob(body);\n\t\t\tboundary = body.type.split('=')[1];\n\t\t} else {\n\t\t\t// None of the above\n\t\t\t// coerce to string then buffer\n\t\t\tbody = Buffer.from(String(body));\n\t\t}\n\n\t\tlet stream = body;\n\n\t\tif (Buffer.isBuffer(body)) {\n\t\t\tstream = Stream.Readable.from(body);\n\t\t} else if (isBlob(body)) {\n\t\t\tstream = Stream.Readable.from(body.stream());\n\t\t}\n\n\t\tthis[INTERNALS] = {\n\t\t\tbody,\n\t\t\tstream,\n\t\t\tboundary,\n\t\t\tdisturbed: false,\n\t\t\terror: null\n\t\t};\n\t\tthis.size = size;\n\n\t\tif (body instanceof Stream) {\n\t\t\tbody.on('error', error_ => {\n\t\t\t\tconst error = error_ instanceof FetchBaseError ?\n\t\t\t\t\terror_ :\n\t\t\t\t\tnew FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);\n\t\t\t\tthis[INTERNALS].error = error;\n\t\t\t});\n\t\t}\n\t}\n\n\tget body() {\n\t\treturn this[INTERNALS].stream;\n\t}\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t}\n\n\t/**\n\t * Decode response as ArrayBuffer\n\t *\n\t * @return  Promise\n\t */\n\tasync arrayBuffer() {\n\t\tconst {buffer, byteOffset, byteLength} = await consumeBody(this);\n\t\treturn buffer.slice(byteOffset, byteOffset + byteLength);\n\t}\n\n\tasync formData() {\n\t\tconst ct = this.headers.get('content-type');\n\n\t\tif (ct.startsWith('application/x-www-form-urlencoded')) {\n\t\t\tconst formData = new FormData();\n\t\t\tconst parameters = new URLSearchParams(await this.text());\n\n\t\t\tfor (const [name, value] of parameters) {\n\t\t\t\tformData.append(name, value);\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\tconst {toFormData} = await import('./utils/multipart-parser.js');\n\t\treturn toFormData(this.body, ct);\n\t}\n\n\t/**\n\t * Return raw response as Blob\n\t *\n\t * @return Promise\n\t */\n\tasync blob() {\n\t\tconst ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';\n\t\tconst buf = await this.arrayBuffer();\n\n\t\treturn new Blob([buf], {\n\t\t\ttype: ct\n\t\t});\n\t}\n\n\t/**\n\t * Decode response as json\n\t *\n\t * @return  Promise\n\t */\n\tasync json() {\n\t\tconst text = await this.text();\n\t\treturn JSON.parse(text);\n\t}\n\n\t/**\n\t * Decode response as text\n\t *\n\t * @return  Promise\n\t */\n\tasync text() {\n\t\tconst buffer = await consumeBody(this);\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\n\t/**\n\t * Decode response as buffer (non-spec api)\n\t *\n\t * @return  Promise\n\t */\n\tbuffer() {\n\t\treturn consumeBody(this);\n\t}\n}\n\nBody.prototype.buffer = deprecate(Body.prototype.buffer, 'Please use \\'response.arrayBuffer()\\' instead of \\'response.buffer()\\'', 'node-fetch#buffer');\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: {enumerable: true},\n\tbodyUsed: {enumerable: true},\n\tarrayBuffer: {enumerable: true},\n\tblob: {enumerable: true},\n\tjson: {enumerable: true},\n\ttext: {enumerable: true},\n\tdata: {get: deprecate(() => {},\n\t\t'data doesn\\'t exist, use json(), text(), arrayBuffer(), or body instead',\n\t\t'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}\n});\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\nasync function consumeBody(data) {\n\tif (data[INTERNALS].disturbed) {\n\t\tthrow new TypeError(`body used already for: ${data.url}`);\n\t}\n\n\tdata[INTERNALS].disturbed = true;\n\n\tif (data[INTERNALS].error) {\n\t\tthrow data[INTERNALS].error;\n\t}\n\n\tconst {body} = data;\n\n\t// Body is null\n\tif (body === null) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t/* c8 ignore next 3 */\n\tif (!(body instanceof Stream)) {\n\t\treturn Buffer.alloc(0);\n\t}\n\n\t// Body is stream\n\t// get ready to actually consume the body\n\tconst accum = [];\n\tlet accumBytes = 0;\n\n\ttry {\n\t\tfor await (const chunk of body) {\n\t\t\tif (data.size > 0 && accumBytes + chunk.length > data.size) {\n\t\t\t\tconst error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');\n\t\t\t\tbody.destroy(error);\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t}\n\t} catch (error) {\n\t\tconst error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);\n\t\tthrow error_;\n\t}\n\n\tif (body.readableEnded === true || body._readableState.ended === true) {\n\t\ttry {\n\t\t\tif (accum.every(c => typeof c === 'string')) {\n\t\t\t\treturn Buffer.from(accum.join(''));\n\t\t\t}\n\n\t\t\treturn Buffer.concat(accum, accumBytes);\n\t\t} catch (error) {\n\t\t\tthrow new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);\n\t\t}\n\t} else {\n\t\tthrow new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n\t}\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\nexport const clone = (instance, highWaterMark) => {\n\tlet p1;\n\tlet p2;\n\tlet {body} = instance[INTERNALS];\n\n\t// Don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// Check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif ((body instanceof Stream) && (typeof body.getBoundary !== 'function')) {\n\t\t// Tee instance body\n\t\tp1 = new PassThrough({highWaterMark});\n\t\tp2 = new PassThrough({highWaterMark});\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// Set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].stream = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n};\n\nconst getNonSpecFormDataBoundary = deprecate(\n\tbody => body.getBoundary(),\n\t'form-data doesn\\'t follow the spec and requires special treatment. Use alternative package',\n\t'https://github.com/node-fetch/node-fetch/issues/1167'\n);\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\nexport const extractContentType = (body, request) => {\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn null;\n\t}\n\n\t// Body is string\n\tif (typeof body === 'string') {\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n\n\t// Body is a URLSearchParams\n\tif (isURLSearchParameters(body)) {\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t}\n\n\t// Body is blob\n\tif (isBlob(body)) {\n\t\treturn body.type || null;\n\t}\n\n\t// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\tif (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n\t\treturn null;\n\t}\n\n\tif (body instanceof FormData) {\n\t\treturn `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getBoundary === 'function') {\n\t\treturn `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n\t}\n\n\t// Body is stream - can't really do much about this\n\tif (body instanceof Stream) {\n\t\treturn null;\n\t}\n\n\t// Body constructor defaults other things to string\n\treturn 'text/plain;charset=UTF-8';\n};\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\nexport const getTotalBytes = request => {\n\tconst {body} = request[INTERNALS];\n\n\t// Body is null or undefined\n\tif (body === null) {\n\t\treturn 0;\n\t}\n\n\t// Body is Blob\n\tif (isBlob(body)) {\n\t\treturn body.size;\n\t}\n\n\t// Body is Buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn body.length;\n\t}\n\n\t// Detect form data input from form-data module\n\tif (body && typeof body.getLengthSync === 'function') {\n\t\treturn body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n\t}\n\n\t// Body is stream\n\treturn null;\n};\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {Promise<void>}\n */\nexport const writeToStream = async (dest, {body}) => {\n\tif (body === null) {\n\t\t// Body is null\n\t\tdest.end();\n\t} else {\n\t\t// Body is stream\n\t\tawait pipeline(body, dest);\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}