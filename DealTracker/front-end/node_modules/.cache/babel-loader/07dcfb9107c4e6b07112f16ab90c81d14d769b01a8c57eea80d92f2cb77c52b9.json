{"ast":null,"code":"import _createClass from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { FetchBaseError } from './base.js';\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nexport var FetchError = /*#__PURE__*/function (_FetchBaseError) {\n  _inherits(FetchError, _FetchBaseError);\n  var _super = _createSuper(FetchError);\n  /**\n   * @param  {string} message -      Error message for human\n   * @param  {string} [type] -        Error type for machine\n   * @param  {SystemError} [systemError] - For Node.js system error\n   */\n  function FetchError(message, type, systemError) {\n    var _this;\n    _classCallCheck(this, FetchError);\n    _this = _super.call(this, message, type);\n    // When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n    if (systemError) {\n      // eslint-disable-next-line no-multi-assign\n      _this.code = _this.errno = systemError.code;\n      _this.erroredSysCall = systemError.syscall;\n    }\n    return _this;\n  }\n  return _createClass(FetchError);\n}(FetchBaseError);","map":{"version":3,"names":["FetchBaseError","FetchError","message","type","systemError","code","errno","erroredSysCall","syscall"],"sources":["/home/ubuntu/environment/public_html/DealTracker/front-end/node_modules/node-fetch/src/errors/fetch-error.js"],"sourcesContent":["\nimport {FetchBaseError} from './base.js';\n\n/**\n * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError\n*/\n\n/**\n * FetchError interface for operational errors\n */\nexport class FetchError extends FetchBaseError {\n\t/**\n\t * @param  {string} message -      Error message for human\n\t * @param  {string} [type] -        Error type for machine\n\t * @param  {SystemError} [systemError] - For Node.js system error\n\t */\n\tconstructor(message, type, systemError) {\n\t\tsuper(message, type);\n\t\t// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code\n\t\tif (systemError) {\n\t\t\t// eslint-disable-next-line no-multi-assign\n\t\t\tthis.code = this.errno = systemError.code;\n\t\t\tthis.erroredSysCall = systemError.syscall;\n\t\t}\n\t}\n}\n"],"mappings":";;;;AACA,SAAQA,cAAc,QAAO,WAAW;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAaC,UAAU;EAAA;EAAA;EACtB;AACD;AACA;AACA;AACA;EACC,oBAAYC,OAAO,EAAEC,IAAI,EAAEC,WAAW,EAAE;IAAA;IAAA;IACvC,0BAAMF,OAAO,EAAEC,IAAI;IACnB;IACA,IAAIC,WAAW,EAAE;MAChB;MACA,MAAKC,IAAI,GAAG,MAAKC,KAAK,GAAGF,WAAW,CAACC,IAAI;MACzC,MAAKE,cAAc,GAAGH,WAAW,CAACI,OAAO;IAC1C;IAAC;EACF;EAAC;AAAA,EAd8BR,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}